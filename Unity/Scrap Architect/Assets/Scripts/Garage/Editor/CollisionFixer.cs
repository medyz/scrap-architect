using UnityEngine;
using UnityEditor;
using System;

namespace ScrapArchitect.Garage.Editor
{
    public class CollisionFixer : EditorWindow
    {
        [MenuItem("Scrap Architect/Garage/Fix All Collisions in Simple Garage")]
        public static void FixAllCollisions()
        {
            Debug.Log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ö–û–õ–õ–ò–ó–ò–ô –í SIMPLE GARAGE ===");
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª
            FixFloorCollisions();
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã
            FixWallCollisions();
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            FixObjectCollisions();
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ–±–µ–ª—å
            FixFurnitureCollisions();
            
            Debug.Log("=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–õ–õ–ò–ó–ò–ô –ó–ê–í–ï–†–®–ï–ù–û ===");
        }
        
        static void FixFloorCollisions()
        {
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ø–æ–ª–∞...");
            
            // –ò—â–µ–º –ø–æ–ª
            GameObject floor = GameObject.Find("Floor");
            if (floor == null)
            {
                floor = GameObject.Find("Carpet");
            }
            
            if (floor != null)
            {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏—é –ø–æ–ª–∞
                BoxCollider floorCollider = floor.GetComponent<BoxCollider>();
                if (floorCollider == null)
                {
                    floorCollider = floor.AddComponent<BoxCollider>();
                }
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –ø–æ–ª–∞
                floorCollider.size = new Vector3(20f, 0.1f, 20f); // –ë–æ–ª—å—à–∞—è –ø–ª–æ—â–∞–¥—å
                floorCollider.center = Vector3.zero;
                floorCollider.isTrigger = false;
                
                Debug.Log($"‚úÖ –ö–æ–ª–ª–∏–∑–∏—è –ø–æ–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: {floor.name}");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ü–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
        
        static void FixWallCollisions()
        {
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å—Ç–µ–Ω...");
            
            // –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–µ–Ω–∞–º–∏
            GameObject[] allObjects = FindObjectsOfType<GameObject>();
            
            foreach (GameObject obj in allObjects)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —Å—Ç–µ–Ω–æ–π
                if (IsWall(obj))
                {
                    AddWallCollision(obj);
                }
            }
        }
        
        static bool IsWall(GameObject obj)
        {
            string name = obj.name.ToLower();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
            if (name.Contains("wall") || name.Contains("exterior") || 
                name.Contains("garage") || name.Contains("ceiling"))
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å—Ç–µ–Ω—ã –æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–µ –∏ —Ç–æ–Ω–∫–∏–µ)
            Vector3 scale = obj.transform.localScale;
            if (scale.y > 2f && (scale.x < 0.5f || scale.z < 0.5f))
            {
                return true;
            }
            
            return false;
        }
        
        static void AddWallCollision(GameObject wall)
        {
            BoxCollider wallCollider = wall.GetComponent<BoxCollider>();
            if (wallCollider == null)
            {
                wallCollider = wall.AddComponent<BoxCollider>();
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é —Å—Ç–µ–Ω—ã
            Renderer renderer = wall.GetComponent<Renderer>();
            if (renderer != null)
            {
                wallCollider.size = renderer.bounds.size;
                wallCollider.center = Vector3.zero;
            }
            else
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                wallCollider.size = wall.transform.localScale;
                wallCollider.center = Vector3.zero;
            }
            
            wallCollider.isTrigger = false;
            
            Debug.Log($"‚úÖ –ö–æ–ª–ª–∏–∑–∏—è —Å—Ç–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞: {wall.name}");
        }
        
        static void FixObjectCollisions()
        {
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...");
            
            // –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏
            string[] objectNames = {
                "Table", "Shelf", "Locker", "Garage door", "Drilling machine",
                "Saw", "Bench Grinder", "Air conditioner", "Small stool",
                "Big shelf", "Large corner shelf", "3 shelves", "Opened locker",
                "Between locker", "Carpet"
            };
            
            foreach (string objName in objectNames)
            {
                GameObject obj = GameObject.Find(objName);
                if (obj != null)
                {
                    AddObjectCollision(obj);
                }
            }
            
            // –ò—â–µ–º –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã Simple Garage
            GameObject[] allObjects = FindObjectsOfType<GameObject>();
            foreach (GameObject obj in allObjects)
            {
                if (obj.name.Contains("suitcase") || obj.name.Contains("Drill") ||
                    obj.name.Contains("Machinery") || obj.name.Contains("Socket") ||
                    obj.name.Contains("Hook") || obj.name.Contains("Clamp") ||
                    obj.name.Contains("Sponge") || obj.name.Contains("Hose"))
                {
                    AddObjectCollision(obj);
                }
            }
        }
        
        static void AddObjectCollision(GameObject obj)
        {
            BoxCollider objCollider = obj.GetComponent<BoxCollider>();
            if (objCollider == null)
            {
                objCollider = obj.AddComponent<BoxCollider>();
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –æ–±—ä–µ–∫—Ç–∞
            Renderer renderer = obj.GetComponent<Renderer>();
            if (renderer != null)
            {
                objCollider.size = renderer.bounds.size;
                objCollider.center = Vector3.zero;
            }
            else
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                objCollider.size = obj.transform.localScale;
                objCollider.center = Vector3.zero;
            }
            
            objCollider.isTrigger = false;
            
            Debug.Log($"‚úÖ –ö–æ–ª–ª–∏–∑–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {obj.name}");
        }
        
        static void FixFurnitureCollisions()
        {
            Debug.Log("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–±–µ–ª–∏...");
            
            // –ò—â–µ–º –º–µ–±–µ–ª—å –ø–æ —Ç–µ–≥–∞–º –∏ –∏–º–µ–Ω–∞–º
            GameObject[] allObjects = FindObjectsOfType<GameObject>();
            
            foreach (GameObject obj in allObjects)
            {
                if (IsFurniture(obj))
                {
                    AddFurnitureCollision(obj);
                }
            }
        }
        
        static bool IsFurniture(GameObject obj)
        {
            string name = obj.name.ToLower();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
            if (name.Contains("table") || name.Contains("shelf") || 
                name.Contains("locker") || name.Contains("stool") ||
                name.Contains("bench") || name.Contains("cabinet"))
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–º–µ–±–µ–ª—å –æ–±—ã—á–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
            Vector3 scale = obj.transform.localScale;
            if (scale.x > 0.5f && scale.y > 0.5f && scale.z > 0.5f &&
                scale.x < 5f && scale.y < 5f && scale.z < 5f)
            {
                return true;
            }
            
            return false;
        }
        
        static void AddFurnitureCollision(GameObject furniture)
        {
            BoxCollider furnitureCollider = furniture.GetComponent<BoxCollider>();
            if (furnitureCollider == null)
            {
                furnitureCollider = furniture.AddComponent<BoxCollider>();
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –º–µ–±–µ–ª–∏
            Renderer renderer = furniture.GetComponent<Renderer>();
            if (renderer != null)
            {
                furnitureCollider.size = renderer.bounds.size;
                furnitureCollider.center = Vector3.zero;
            }
            else
            {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                furnitureCollider.size = furniture.transform.localScale;
                furnitureCollider.center = Vector3.zero;
            }
            
            furnitureCollider.isTrigger = false;
            
            Debug.Log($"‚úÖ –ö–æ–ª–ª–∏–∑–∏—è –º–µ–±–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {furniture.name}");
        }
        
        [MenuItem("Scrap Architect/Garage/Check Missing Collisions")]
        public static void CheckMissingCollisions()
        {
            Debug.Log("=== –ü–†–û–í–ï–†–ö–ê –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ö–û–õ–õ–ò–ó–ò–ô ===");
            
            GameObject[] allObjects = FindObjectsOfType<GameObject>();
            int missingCollisions = 0;
            
            foreach (GameObject obj in allObjects)
            {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞, –∫–∞–º–µ—Ä—É –∏ UI
                if (obj.name.Contains("Player") || obj.name.Contains("Camera") || 
                    obj.name.Contains("UI") || obj.name.Contains("Canvas"))
                {
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–ª–ª–∏–∑–∏—è
                if (NeedsCollision(obj) && obj.GetComponent<Collider>() == null)
                {
                    Debug.LogWarning($"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–ª–∏–∑–∏—è: {obj.name}");
                    missingCollisions++;
                }
            }
            
            if (missingCollisions == 0)
            {
                Debug.Log("‚úÖ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–º–µ—é—Ç –∫–æ–ª–ª–∏–∑–∏–∏!");
            }
            else
            {
                Debug.LogWarning($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {missingCollisions} –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π");
            }
        }
        
        static bool NeedsCollision(GameObject obj)
        {
            // –û–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏
            string name = obj.name.ToLower();
            
            if (name.Contains("floor") || name.Contains("carpet") ||
                name.Contains("wall") || name.Contains("exterior") ||
                name.Contains("table") || name.Contains("shelf") ||
                name.Contains("locker") || name.Contains("door") ||
                name.Contains("machine") || name.Contains("tool") ||
                name.Contains("suitcase") || name.Contains("drill") ||
                name.Contains("furniture") || name.Contains("stool"))
            {
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏)
            Vector3 scale = obj.transform.localScale;
            if (scale.x > 1f || scale.y > 1f || scale.z > 1f)
            {
                return true;
            }
            
            return false;
        }
        
        [MenuItem("Scrap Architect/Garage/Remove All Collisions")]
        public static void RemoveAllCollisions()
        {
            Debug.Log("=== –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ö–û–õ–õ–ò–ó–ò–ô ===");
            
            GameObject[] allObjects = FindObjectsOfType<GameObject>();
            int removedCollisions = 0;
            
            foreach (GameObject obj in allObjects)
            {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞
                if (obj.name.Contains("Player"))
                {
                    continue;
                }
                
                Collider[] colliders = obj.GetComponents<Collider>();
                foreach (Collider collider in colliders)
                {
                    DestroyImmediate(collider);
                    removedCollisions++;
                }
            }
            
            Debug.Log($"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removedCollisions} –∫–æ–ª–ª–∏–∑–∏–π");
        }
    }
}
