using UnityEngine;
using UnityEngine.UI;
using TMPro;
using ScrapArchitect.Economy;

namespace ScrapArchitect.UI
{
    /// <summary>
    /// UI —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    /// </summary>
    public class ShopItem : MonoBehaviour
    {
        [Header("UI References")]
        public TextMeshProUGUI itemNameText;
        public TextMeshProUGUI priceText;
        public TextMeshProUGUI descriptionText;
        public Image itemIcon;
        public Button purchaseButton;
        public Button infoButton;
        public GameObject saleBadge;
        public TextMeshProUGUI saleText;
        public Slider saleTimerSlider;
        
        [Header("Visual Settings")]
        public Color normalPriceColor = Color.white;
        public Color salePriceColor = Color.red;
        public Color affordableColor = Color.green;
        public Color expensiveColor = Color.red;
        public Color lockedColor = Color.gray;
        
        [Header("Audio Settings")]
        public AudioClip buttonClickSound;
        public AudioClip hoverSound;
        
        private string itemID;
        private EconomyManager economyManager;
        private bool hasSale = false;
        private float saleEndTime = 0f;
        
        private void Start()
        {
            SetupButtons();
        }
        
        private void Update()
        {
            UpdateSaleTimer();
        }
        
        public void Initialize(string itemID, EconomyManager manager)
        {
            this.itemID = itemID;
            this.economyManager = manager;
            
            UpdateUI();
        }
        
        private void SetupButtons()
        {
            if (purchaseButton != null)
            {
                purchaseButton.onClick.AddListener(OnPurchaseButtonClicked);
            }
            
            if (infoButton != null)
            {
                infoButton.onClick.AddListener(OnInfoButtonClicked);
            }
        }
        
        private void UpdateUI()
        {
            if (economyManager == null) return;
            
            // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (itemNameText != null)
            {
                itemNameText.text = GetDisplayName(itemID);
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É
            UpdatePriceDisplay();
            
            // –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
            if (descriptionText != null)
            {
                descriptionText.text = GetItemDescription(itemID);
            }
            
            // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
            UpdateItemIcon();
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
            UpdatePurchaseButton();
            
            // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
            UpdateSaleDisplay();
        }
        
        private void UpdatePriceDisplay()
        {
            if (priceText == null || economyManager == null) return;
            
            float basePrice = economyManager.GetItemPrice(itemID);
            float currentPrice = economyManager.GetItemPrice(itemID);
            int currentScrap = economyManager.GetCurrentScrap();
            
            // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞
            hasSale = currentPrice < basePrice;
            
            if (hasSale)
            {
                priceText.text = $"<s>{basePrice}</s> {currentPrice} üí∞";
                priceText.color = salePriceColor;
            }
            else
            {
                priceText.text = $"{currentPrice} üí∞";
                priceText.color = normalPriceColor;
            }
            
            // –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if (currentPrice <= currentScrap)
            {
                priceText.color = affordableColor;
            }
            else
            {
                priceText.color = expensiveColor;
            }
        }
        
        private void UpdateItemIcon()
        {
            if (itemIcon == null) return;
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
            // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            Color iconColor = GetItemColor(itemID);
            itemIcon.color = iconColor;
        }
        
        private void UpdatePurchaseButton()
        {
            if (purchaseButton == null || economyManager == null) return;
            
            float price = economyManager.GetItemPrice(itemID);
            int currentScrap = economyManager.GetCurrentScrap();
            bool canAfford = price <= currentScrap;
            
            purchaseButton.interactable = canAfford;
            
            // –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
            Image buttonImage = purchaseButton.GetComponent<Image>();
            if (buttonImage != null)
            {
                buttonImage.color = canAfford ? affordableColor : expensiveColor;
            }
        }
        
        private void UpdateSaleDisplay()
        {
            if (saleBadge == null) return;
            
            saleBadge.SetActive(hasSale);
            
            if (hasSale && saleText != null)
            {
                saleText.text = "SALE!";
            }
        }
        
        private void UpdateSaleTimer()
        {
            if (!hasSale || saleTimerSlider == null) return;
            
            if (Time.time < saleEndTime)
            {
                float timeLeft = saleEndTime - Time.time;
                float totalTime = 300f; // 5 –º–∏–Ω—É—Ç
                saleTimerSlider.value = timeLeft / totalTime;
            }
            else
            {
                // –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                hasSale = false;
                UpdateUI();
            }
        }
        
        private void OnPurchaseButtonClicked()
        {
            if (economyManager == null) return;
            
            PlayButtonClickSound();
            
            bool success = economyManager.PurchaseItem(itemID);
            if (success)
            {
                Debug.Log($"Successfully purchased {itemID}");
                // –ü—Ä–µ–¥–º–µ—Ç –∫—É–ø–ª–µ–Ω, –æ–±–Ω–æ–≤–∏—Ç—å UI
                UpdateUI();
            }
            else
            {
                Debug.LogWarning($"Failed to purchase {itemID}");
            }
        }
        
        private void OnInfoButtonClicked()
        {
            if (economyManager == null) return;
            
            PlayButtonClickSound();
            
            string info = economyManager.GetItemInfo(itemID);
            Debug.Log($"Item Info:\n{info}");
        }
        
        private string GetDisplayName(string itemID)
        {
            return itemID switch
            {
                "WoodBlock" => "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –±–ª–æ–∫",
                "MetalBlock" => "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫",
                "PlasticBlock" => "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –±–ª–æ–∫",
                "StoneBlock" => "–ö–∞–º–µ–Ω–Ω—ã–π –±–ª–æ–∫",
                
                "SmallWheel" => "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–µ—Å–æ",
                "MediumWheel" => "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ",
                "LargeWheel" => "–ë–æ–ª—å—à–æ–µ –∫–æ–ª–µ—Å–æ",
                "OffRoadWheel" => "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–æ–µ –∫–æ–ª–µ—Å–æ",
                
                "ElectricMotor" => "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "GasolineMotor" => "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "DieselMotor" => "–î–∏–∑–µ–ª—å–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "JetMotor" => "–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                
                "FixedJoint" => "–ñ–µ—Å—Ç–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "HingeJoint" => "–®–∞—Ä–Ω–∏—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "SpringJoint" => "–ü—Ä—É–∂–∏–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "SliderJoint" => "–ü–æ–ª–∑—É–Ω–∫–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "ConfigurableJoint" => "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                
                "BasicSeat" => "–ë–∞–∑–æ–≤–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                "ComfortSeat" => "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                "RacingSeat" => "–ì–æ–Ω–æ—á–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                "LuxurySeat" => "–õ—é–∫—Å–æ–≤–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                "IndustrialSeat" => "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                
                "Hammer" => "–ú–æ–ª–æ—Ç–æ–∫",
                "Wrench" => "–ì–∞–µ—á–Ω—ã–π –∫–ª—é—á",
                "Screwdriver" => "–û—Ç–≤–µ—Ä—Ç–∫–∞",
                "Drill" => "–î—Ä–µ–ª—å",
                "Welder" => "–°–≤–∞—Ä—â–∏–∫",
                "Magnet" => "–ú–∞–≥–Ω–∏—Ç",
                "Vacuum" => "–ü—ã–ª–µ—Å–æ—Å",
                "Sprayer" => "–†–∞—Å–ø—ã–ª–∏—Ç–µ–ª—å",
                
                _ => itemID
            };
        }
        
        private string GetItemDescription(string itemID)
        {
            return itemID switch
            {
                "WoodBlock" => "–ü—Ä–æ—á–Ω—ã–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
                "MetalBlock" => "–ü—Ä–æ—á–Ω—ã–π –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫",
                "PlasticBlock" => "–õ–µ–≥–∫–∏–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –±–ª–æ–∫",
                "StoneBlock" => "–¢—è–∂–µ–ª—ã–π –∫–∞–º–µ–Ω–Ω—ã–π –±–ª–æ–∫",
                
                "SmallWheel" => "–ú–∞–ª–µ–Ω—å–∫–æ–µ –∫–æ–ª–µ—Å–æ –¥–ª—è –ª–µ–≥–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                "MediumWheel" => "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ",
                "LargeWheel" => "–ë–æ–ª—å—à–æ–µ –∫–æ–ª–µ—Å–æ –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –º–∞—à–∏–Ω",
                "OffRoadWheel" => "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–æ–µ –∫–æ–ª–µ—Å–æ —Å —Ö–æ—Ä–æ—à–∏–º —Å—Ü–µ–ø–ª–µ–Ω–∏–µ–º",
                
                "ElectricMotor" => "–≠–∫–æ–ª–æ–≥–∏—á–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "GasolineMotor" => "–ú–æ—â–Ω—ã–π –±–µ–Ω–∑–∏–Ω–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "DieselMotor" => "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–µ–ª—å–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                "JetMotor" => "–°–≤–µ—Ä—Ö–º–æ—â–Ω—ã–π —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                
                "FixedJoint" => "–ü—Ä–æ—á–Ω–æ–µ –∂–µ—Å—Ç–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "HingeJoint" => "–ì–∏–±–∫–æ–µ —à–∞—Ä–Ω–∏—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "SpringJoint" => "–≠–ª–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä—É–∂–∏–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "SliderJoint" => "–ü–æ–¥–≤–∏–∂–Ω–æ–µ –ø–æ–ª–∑—É–Ω–∫–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "ConfigurableJoint" => "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                
                "BasicSeat" => "–ü—Ä–æ—Å—Ç–æ–µ —Å–∏–¥–µ–Ω—å–µ –≤–æ–¥–∏—Ç–µ–ª—è",
                "ComfortSeat" => "–£–¥–æ–±–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ —Å –ø–æ–¥—É—à–∫–∞–º–∏",
                "RacingSeat" => "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ –¥–ª—è –≥–æ–Ω–æ–∫",
                "LuxurySeat" => "–†–æ—Å–∫–æ—à–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
                "IndustrialSeat" => "–ü—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ —Å–∏–¥–µ–Ω—å–µ",
                
                "Hammer" => "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
                "Wrench" => "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –≥–∞–µ–∫",
                "Screwdriver" => "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–Ω—Ç–∞–º–∏",
                "Drill" => "–ú–æ—â–Ω–∞—è –¥—Ä–µ–ª—å –¥–ª—è —Å–≤–µ—Ä–ª–µ–Ω–∏—è",
                "Welder" => "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–≤–∞—Ä–∫–∏ –º–µ—Ç–∞–ª–ª–∞",
                "Magnet" => "–ú–∞–≥–Ω–∏—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                "Vacuum" => "–ü—ã–ª–µ—Å–æ—Å –¥–ª—è —É–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞",
                "Sprayer" => "–†–∞—Å–ø—ã–ª–∏—Ç–µ–ª—å –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏",
                
                _ => "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            };
        }
        
        private Color GetItemColor(string itemID)
        {
            if (itemID.Contains("Block"))
            {
                if (itemID.Contains("Wood")) return new Color(0.6f, 0.4f, 0.2f); // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
                if (itemID.Contains("Metal")) return Color.gray;
                if (itemID.Contains("Plastic")) return Color.cyan;
                if (itemID.Contains("Stone")) return Color.gray;
            }
            else if (itemID.Contains("Wheel"))
            {
                return Color.black;
            }
            else if (itemID.Contains("Motor"))
            {
                if (itemID.Contains("Electric")) return Color.green;
                if (itemID.Contains("Gasoline")) return Color.red;
                if (itemID.Contains("Diesel")) return Color.blue;
                if (itemID.Contains("Jet")) return Color.magenta;
            }
            else if (itemID.Contains("Joint"))
            {
                return Color.yellow;
            }
            else if (itemID.Contains("Seat"))
            {
                return Color.blue;
            }
            else if (itemID.Contains("Tool") || itemID.Contains("Hammer") || itemID.Contains("Wrench") ||
                     itemID.Contains("Drill") || itemID.Contains("Welder") || itemID.Contains("Magnet") ||
                     itemID.Contains("Vacuum") || itemID.Contains("Sprayer"))
            {
                return Color.orange;
            }
            
            return Color.white;
        }
        
        public void OnPointerEnter()
        {
            PlayHoverSound();
        }
        
        public void OnPointerExit()
        {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
        }
        
        private void PlayButtonClickSound()
        {
            if (buttonClickSound != null)
            {
                AudioSource.PlayClipAtPoint(buttonClickSound, Camera.main.transform.position);
            }
        }
        
        private void PlayHoverSound()
        {
            if (hoverSound != null)
            {
                AudioSource.PlayClipAtPoint(hoverSound, Camera.main.transform.position);
            }
        }
        
        public string GetItemID()
        {
            return itemID;
        }
        
        public bool HasSale()
        {
            return hasSale;
        }
        
        public void SetSaleEndTime(float endTime)
        {
            saleEndTime = endTime;
            hasSale = true;
            UpdateUI();
        }
        
        private void OnDestroy()
        {
            if (purchaseButton != null)
            {
                purchaseButton.onClick.RemoveListener(OnPurchaseButtonClicked);
            }
            
            if (infoButton != null)
            {
                infoButton.onClick.RemoveListener(OnInfoButtonClicked);
            }
        }
    }
}
